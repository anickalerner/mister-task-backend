{"version":3,"sources":["cmps/TaskCard.jsx","services/httpService.js","services/taskService.js","cmps/AddTask.jsx","services/socketService.js","App.js","actions/taskActions.js","serviceWorker.js","reducers/taskReducer.js","reducers/systemReducer.js","reducers/index.js","store.js","index.js"],"names":["TaskCard","props","colors","task","React","useState","importance","setImportance","ind","parseInt","Math","random","length","getRandomColor","color","editDisabled","style","backgroundColor","Card","variant","className","done","Chip","label","CardHeader","title","CardContent","type","min","max","value","onChange","ev","target","Date","createdAt","toLocaleString","triesCount","doneAt","CardActions","IconButton","aria-label","onClick","onDelete","_id","disabled","onEdit","onStart","axios","Axios","create","withCredentials","endpoint","data","ajax","a","async","method","url","res","console","log","dir","add","httpService","query","remove","id","update","start","undoAll","AddTask","setTitle","fieldRef","createRef","noValidate","autoComplete","onSubmit","preventDefault","onAddTask","current","Button","startIcon","TextField","onKeyUp","inputRef","socket","setup","io","terminate","on","eventName","cb","off","emit","App","updateTaskTrial","taskStr","JSON","parse","addTask","deleteTask","updateTask","startTask","undoTasks","this","loadTasks","socketService","tasks","map","key","Component","mapDispatchToProps","dispatch","taskService","addedTask","removedTaskId","err","connect","state","taskReducer","Boolean","window","location","hostname","match","initialState","isLoading","rootReducer","combineReducers","systemReducer","action","filter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76bea1b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport PriorityHighIcon from '@material-ui/icons/PriorityHigh';\r\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\n\r\nexport default function TaskCard(props) {\r\n    const colors = ['D1EEF0', 'EEE5F0', 'C1D7C1', 'B9BDCB'];\r\n    const { task } = props;\r\n    const [importance, setImportance] = React.useState(task.importance ? task.importance : 1);\r\n    const [color] = React.useState(getRandomColor());\r\n\r\n    function handleChange(ev){\r\n        setImportance(ev.target.value);\r\n    }\r\n\r\n    function onEdit(){\r\n        props.onEdit({...task, importance })\r\n    }\r\n\r\n    function getRandomColor(){\r\n        const ind = parseInt(Math.random() * (colors.length));\r\n        return '#' + colors[ind];\r\n    }\r\n\r\n    const editDisabled = task.importance === importance;\r\n    return (\r\n        <div style={{ backgroundColor: color}}>\r\n        <Card variant=\"outlined\" className=\"task-card\">\r\n            {task.done && <Chip label=\"Done\" className=\"done\" />}\r\n            <CardHeader title={task.title} />\r\n            <CardContent>\r\n                <ul>\r\n                    <li><PriorityHighIcon /> Importance: <input type=\"number\" min=\"1\" max=\"3\" value={importance} onChange={handleChange} className=\"task-importance\" /></li>\r\n                   \r\n                    <li><AccessTimeIcon />{new Date(task.createdAt).toLocaleString()}</li>\r\n                    {task.triesCount && <li><AutorenewIcon /> Tries count: {task.triesCount}</li>}\r\n                    {task.done && <li><AccessTimeIcon /> Done at: {new Date(task.doneAt).toLocaleString()}</li>}\r\n                </ul>\r\n            </CardContent>\r\n            <CardActions>\r\n                <IconButton aria-label=\"delete\" onClick={() => props.onDelete(task._id)}>\r\n                    <DeleteIcon />\r\n                </IconButton>\r\n                <IconButton aria-label=\"edit\" disabled={editDisabled} onClick={onEdit}>\r\n                    <EditIcon />\r\n                </IconButton>\r\n                <IconButton aria-label=\"start\" disabled={task.done} onClick={() => props.onStart(task._id)}>\r\n                    <PlayCircleFilledIcon/>\r\n                </IconButton>\r\n            </CardActions>\r\n        </Card>\r\n        </div>\r\n    );\r\n}\r\n","import Axios from 'axios';\r\n\r\nconst BASE_URL = process.env.NODE_ENV === 'production'\r\n    ? '/api/'\r\n    : '//localhost:3030/api/'\r\n\r\n\r\nvar axios = Axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nexport default {\r\n    get(endpoint, data) {\r\n        return ajax(endpoint, 'GET', data)\r\n    },\r\n    post(endpoint, data) {\r\n        return ajax(endpoint, 'POST', data)\r\n    },\r\n    put(endpoint, data) {\r\n        return ajax(endpoint, 'PUT', data)\r\n    },\r\n    delete(endpoint, data) {\r\n        return ajax(endpoint, 'DELETE', data)\r\n    }\r\n}\r\n\r\nasync function ajax(endpoint, method = 'get', data = null) {\r\n    try {\r\n        const res = await axios({\r\n            url: `${BASE_URL}${endpoint}`,\r\n            method,\r\n            data\r\n        })\r\n        return res.data;\r\n    } catch (err) {\r\n        console.log(`Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`);\r\n        console.dir(err);\r\n        throw err;\r\n    }\r\n}","import httpService from './httpService';\r\n\r\nexport default {\r\n  add,\r\n  query,\r\n  remove,\r\n  update,\r\n  start,\r\n  undoAll\r\n};\r\n\r\nfunction query() {\r\n  return httpService.get(`task`);\r\n}\r\n\r\nfunction remove(id) {\r\n  return httpService.delete(`task/${id}`);\r\n}\r\n\r\nfunction add(task) {\r\n  return httpService.post(`task`, task);\r\n}\r\n\r\nfunction update(task) {\r\n  return httpService.put(`task`, task);\r\n}\r\n\r\nfunction start(id){\r\n  return httpService.put(`task/${id}/start`);\r\n}\r\n\r\nfunction undoAll(){\r\n  return httpService.put('task/undo');\r\n}","import { Button, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport AssignmentTurnedInIcon from '@material-ui/icons/AssignmentTurnedIn';\r\n\r\nexport default function AddTask(props) {\r\n    const [title, setTitle] = React.useState('');\r\n    const fieldRef = React.createRef();\r\n    function submitForm(ev){\r\n        ev.preventDefault();\r\n        props.onAddTask(title);\r\n        fieldRef.current.value = '';\r\n    }\r\n    function handleInput(ev){\r\n        setTitle(ev.target.value);\r\n    }\r\n    return (\r\n        <div className=\"add-task\">\r\n            <form noValidate autoComplete=\"off\" onSubmit={submitForm} className=\"flex row\">\r\n                <Button type=\"submit\" \r\n                variant=\"contained\" \r\n                startIcon={<AssignmentTurnedInIcon/>} \r\n                className=\"add-task-btn\">Add task</Button>\r\n                <TextField id=\"outlined-basic\" label=\"Task title\" variant=\"outlined\" onKeyUp={handleInput} inputRef={fieldRef}/>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import io from 'socket.io-client';\r\n\r\nconst BASE_URL =\r\n  process.env.NODE_ENV === 'production' ? '/' : '//localhost:3030';\r\n\r\nlet socket;\r\n\r\nexport default {\r\n  setup,\r\n  terminate,\r\n  on,\r\n  off,\r\n  emit\r\n};\r\n\r\nfunction setup() {\r\n  socket = io(BASE_URL);\r\n}\r\n\r\nfunction terminate() {\r\n  socket = null;\r\n}\r\n\r\nfunction on(eventName, cb) {\r\n  socket.on(eventName, cb);\r\n}\r\n\r\nfunction off(eventName, cb) {\r\n  socket.off(eventName, cb);\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n  socket.emit(eventName, data);\r\n}\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport TaskCard from './cmps/TaskCard';\nimport { loadTasks, addTask, deleteTask, updateTask, startTask, updateTaskTrial, undoTasks } from './actions/taskActions.js';\nimport AddTask from './cmps/AddTask.jsx';\nimport socketService from './services/socketService';\nimport { Button } from '@material-ui/core';\nconst colors = ['D1EEF0', 'EEE5F0', 'C1D7C1', 'B9BDCB'];\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.loadTasks();\n    socketService.setup();\n    socketService.on('task done', this.updateTaskTrial)\n  }\n\n  componentWillUnmount() {\n    socketService.off('task done', this.updateTaskTrial);\n    socketService.terminate();\n  }\n\n  updateTaskTrial = (taskStr) => {\n    this.props.updateTaskTrial(JSON.parse(taskStr));\n  }\n\n  onAddTask = (title) =>{\n    this.props.addTask({title})\n  }\n\n  onDelete = (id) =>{\n    this.props.deleteTask(id);\n  }\n\n  onEdit = (task) =>{\n    this.props.updateTask(task);\n  }\n\n  onStart = (id) =>{\n    this.props.startTask(id);\n  }\n\n  getRandomColor = () => {\n    const ind = parseInt(Math.random() * (colors.length));\n    return '#' + colors[ind];\n  }\n\n  undoTasks = () => {\n    this.props.undoTasks();\n  }\n\n  render() {\n    if (!this.props.tasks) return <div>Loading</div>;\n    return (\n\n      <div className=\"App app-container\">\n        <h1>Task Manager</h1>\n        <div className=\"tasks-container\">\n          {\n            this.props.tasks.map((task, ind) =>\n              <TaskCard task={task} key={ind} onDelete={this.onDelete} onEdit={this.onEdit} onStart={this.onStart} color={this.getRandomColor()} />\n            )\n          }\n        </div>\n        <AddTask onAddTask={this.onAddTask} onDelete={this.onDelete} />\n        <Button onClick={this.undoTasks}>Undo tasks</Button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    tasks: state.taskReducer.tasks\n  };\n};\nconst mapDispatchToProps = {\n  loadTasks,\n  addTask,\n  deleteTask,\n  updateTask,\n  startTask,\n  updateTaskTrial,\n  undoTasks\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import taskService from '../services/taskService';\r\n\r\nexport function loadTasks() {\r\n  return async dispatch => {\r\n    try {\r\n      const tasks = await taskService.query();\r\n      dispatch({ type: 'SET_TASKS', tasks });\r\n\r\n    } catch (err) {\r\n      console.log('TaskActions: err in loadTasks', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function addTask(task) {\r\n  return async dispatch => {\r\n    try {\r\n      const addedTask = await taskService.add(task);\r\n      dispatch({ type: 'ADD_TASK', task: addedTask });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in addTask', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function deleteTask(id){\r\n  return async dispatch => {\r\n    try {\r\n      await taskService.remove(id);\r\n      dispatch({ type: 'DELETE_TASK', removedTaskId: id });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in deleteTask', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function updateTask(task) {\r\n  return async dispatch => {\r\n    try {\r\n      await taskService.update(task);\r\n      dispatch({ type: 'UPDATE_TASK', task });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in updateTask', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function startTask(id){\r\n  return async dispatch => {\r\n    try {\r\n      const task = await taskService.start(id);\r\n      dispatch({ type: 'START_TASK', task });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in startTask', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function updateTaskTrial(task){\r\n  return dispatch => {\r\n    try {\r\n      dispatch({ type: 'MARK_DONE', task });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in markDone', err);\r\n    }\r\n  };\r\n}\r\n\r\nexport function undoTasks(){\r\n  return async dispatch => {\r\n    try {\r\n      const tasks = await taskService.undoAll();\r\n      dispatch({ type: 'UNDO_TASKS', tasks });\r\n    } catch (err) {\r\n      console.log('TaskActions: err in markDone', err);\r\n    }\r\n  };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n  tasks: []\r\n};\r\n\r\nexport default function(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SET_TASKS':\r\n    case 'UNDO_TASKS':\r\n      return { ...state, tasks: action.tasks };\r\n    case 'ADD_TASK':\r\n      return { ...state, tasks: [...state.tasks, action.task] };\r\n    case 'DELETE_TASK':\r\n      return { ...state, tasks: state.tasks.filter(task => task._id !== action.removedTaskId)}\r\n    case 'UPDATE_TASK':\r\n    case 'START_TASK':\r\n    case 'MARK_DONE':\r\n      return {\r\n        ...state,\r\n        tasks: state.tasks.map(task =>\r\n          task._id === action.task._id ? action.task : task\r\n        )};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","const initialState = {\r\n  isLoading: false\r\n};\r\n\r\nexport default function (state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true };\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false };\r\n    default: return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport taskReducer from './taskReducer';\r\nimport systemReducer from './systemReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  systemReducer,\r\n  taskReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/index.js';\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/global.scss'\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}